import os
import subprocess
import sys

try:
    from pydub import AudioSegment
    from pydub.silence import detect_nonsilent
except ImportError:
    subprocess.check_call([sys.executable, "-m", "pip", "install", "pydub"])
    from pydub import AudioSegment
    from pydub.silence import detect_nonsilent


def trim_silence(audio_path, silence_threshold=-30.0, chunk_size=10):
    audio = AudioSegment.from_file(audio_path)
    non_silent_ranges = detect_nonsilent(audio, min_silence_len=chunk_size, silence_thresh=silence_threshold)
    trimmed_audio = sum([audio[start:end] for start, end in non_silent_ranges]) if non_silent_ranges else audio     
    trimmed_audio.export(audio_path, format='wav', parameters=["-ac", "1", "-ar", "4000"])

mojis = 'あいうえおかきくけこがぎぐげごさしすせそざじずぜぞたちつてとだぢづでど'\
    'なにぬねのはひふへほばびぶべぼぱぴぷぺぽまみむめもやゆよらりるれろわをん'

output_dir = 'src'
header = f'{output_dir}/kerowav.hpp'

notice = '''// This file contains binary audio data encoded as a C++ array.
// The data was generated by synthesizing speech using Open JTalk
// with the "Mei" HTS voice model.
//
// The "Mei" voice model was developed by the Department of Computer Science,
// Nagoya Institute of Technology, and released by the MMDAgent Project Team
// (http://www.mmdagent.jp/).
//
// The voice model is licensed under the Creative Commons Attribution 3.0 License.
// See: https://creativecommons.org/licenses/by/3.0/.
//
// The binary data in this file was derived from that synthesis process,
// and this file is distributed under the MIT License.

'''

try:
    if not os.path.exists(header):
        print('generate wavedata...')
        with open(header, 'w', encoding='utf-8') as f:
            f.write(notice)
            f.write('#pragma once\n');
            f.write('#include <array>\n')
        
        for i, c in enumerate(mojis):
            print(c, end='')
            filename = f"{output_dir}/{i}.wav"
            dic = '/opt/homebrew/Cellar/open-jtalk/1.11/dic'
            voice = '/opt/homebrew/Cellar/open-jtalk/1.11/voice/mei/mei_normal.htsvoice'
            os.system(f'open_jtalk -x {dic} -m {voice} -g 15 -fm -2.5 -r 3.0 -ow {filename} <<< "{c}ー"')
            trim_silence(filename)
            os.system(f'xxd -i "{filename}" | sed "s/^unsigned /const unsigned /" >> {header}')
            os.remove(filename)

        print(len(mojis))
        with open(header, 'a', encoding='utf-8') as f:
            f.write(f'constexpr std::array<std::pair<const char*, const unsigned char*>, {len(mojis)}> mojiarray = {{{{\n')
            for i, c in enumerate(mojis):
                f.write(f'{{"{c}", src_{i}_wav}},\n');
            f.write('}};\n')
except:
    os.remove(header)
    raise
